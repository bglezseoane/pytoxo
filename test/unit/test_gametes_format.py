# -*- coding: utf-8 -*-

###########################################################
# PyToxo
#
# A Python library for calculating penetrance tables of any
# bivariate epistasis model.
#
# Copyright 2021 Borja Gonz√°lez Seoane
#
# Contact: borja.gseoane@udc.es
###########################################################

"""PyToxo model unit test suite."""

import os
import re
import unittest

import pytoxo.errors
import pytoxo.model


class GAMETESFormatTestSuite(unittest.TestCase):
    """Tests for check to correct composition of the `PTable` formatted as
    GAMETES format.
    """

    def test_ptable_format_as_gametes(self):
        """Test composition of the `PTable` formatted as GAMETES format,
        comparing with the table generated by Toxo to the same input."""
        m = pytoxo.model.Model(os.path.join("models", "additive_2.csv"))
        p = m.find_max_heritability_table(mafs=[0.25] * m.order, p=0.2, check=False)

        # Toxo contrast
        expected_output = (
            "Attribute names:	P0	P1\n"
            + "Minor allele frequencies:	0.250	0.250\n"
            + "x: 0.09717040\n"
            + "y: 0.79108624\n"
            + "Prevalence: 0.20000000\n"
            + "Heritability: 0.09238291\n"
            + "\n"
            + "Table:\n"
            + "\n"
            + "0.09717040, 0.17404057, 0.31172168\n"
            + "0.17404057, 0.31172168, 0.55832041\n"
            + "0.31172168, 0.55832041, 1.00000000\n"
            + ""
        )

        output = p._compound_table_as_gametes()

        # Previous steps to compare
        expected_output = expected_output.splitlines()
        output = output.splitlines()

        # Exactly equal rows
        for row in [0, 1, 6, 7, 8]:
            self.assertEqual(expected_output[row], output[row])

        # Center region, where used decimals are different in Toxo and PyToxo
        for row in [2, 3, 4, 5]:
            self.assertTrue(output[row].startswith(expected_output[row]))

        # Table content, where floats are filtered in both outputs to compare
        floats_re = re.compile(r"\d+(?:\.\d*)")
        expected_output_table_floats = [
            row
            for row in (", ".join(expected_output[9:])).split(", ")
            if floats_re.match(row)
        ]
        output_table_floats = output[9].split(", ")

        self.assertEqual(len(expected_output_table_floats), len(output_table_floats))
        for v, ev in zip(output_table_floats, expected_output_table_floats):
            print(f"{float(v)} -------- {float(ev)}")
            self.assertAlmostEqual(float(ev), float(v))
