# -*- coding: utf-8 -*-

###########################################################
# PyToxo
#
# A Python library for calculating penetrance tables of any
# bivariate epistasis model.
#
# Copyright 2021 Borja Gonz√°lez Seoane
#
# Contact: borja.gseoane@udc.es
###########################################################

"""PyToxo model unit test suite."""

import os
import re
import unittest

import pytoxo.errors
import pytoxo.model


class GAMETESFormatTestSuite(unittest.TestCase):
    """Tests for check to correct composition of the `PTable` formatted as
    GAMETES format.
    """

    def test_ptable_format_as_gametes_as_toxo(self):
        """Test composition of the `PTable` formatted as GAMETES format,
        comparing with the table generated by Toxo to the same input."""
        m = pytoxo.model.Model(os.path.join("models", "additive_2.csv"))
        pt = m.find_max_heritability_table(mafs=[0.25] * m.order, p=0.2, check=False)

        # Toxo contrast
        expected_output = (
            "Attribute names:	P0	P1\n"
            + "Minor allele frequencies:	0.250	0.250\n"
            + "x: 0.09717040\n"
            + "y: 0.79108624\n"
            + "Prevalence: 0.20000000\n"
            + "Heritability: 0.09238291\n"
            + "\n"
            + "Table:\n"
            + "\n"
            + "0.09717040, 0.17404057, 0.31172168\n"
            + "0.17404057, 0.31172168, 0.55832041\n"
            + "0.31172168, 0.55832041, 1.00000000\n"
            + ""
        )

        output = pt._compound_table_as_gametes()

        # Previous steps to compare
        expected_output = expected_output.splitlines()
        output = output.splitlines()

        # Exactly equal rows
        for row in [0, 1, 6, 7, 8]:
            self.assertEqual(expected_output[row], output[row])

        # Center region, where used decimals are different in Toxo and PyToxo
        for row in [2, 3, 4, 5]:
            self.assertTrue(output[row].startswith(expected_output[row]))

        # Table content, where floats are filtered in both outputs to compare
        expected_output_table = [
            l for l in expected_output[9:] if l.strip() != ""
        ]  # Discard empty lines
        output_table = [l for l in output[9:] if l.strip() != ""]  # Discard empty lines

        self.assertEqual(len(expected_output_table), len(output_table))

        for expected_output_table_line, output_table_line in zip(
            expected_output_table, output_table
        ):
            for ev, v in zip(
                expected_output_table_line.split(","), output_table_line.split(",")
            ):
                self.assertAlmostEqual(float(ev), float(v))

    def test_ptable_as_gametes_check_disposition_as_unknown_2(self):
        """Test composition of the `PTable` formatted as GAMETES format,
        comparing with a valid sample file to the same input. Only compares
        the table disposition, not the values due to the sample table is not
        generated with a known repository model file."""
        test_order = 2  # Determine the sources to use in this particular test

        sample_filename = os.path.join(
            "test", "unit", "gametes_output_samples", f"unknown_{test_order}.txt"
        )
        with open(sample_filename, "r") as sample_file:
            sample = sample_file.readlines()

        # Parse the file to compose the experiment
        for l in sample:
            if l.startswith("Minor allele frequencies:\t"):
                mafs = [
                    float(maf)
                    for maf in l.replace("Minor allele frequencies:\t", "").split("\t")
                ]
                break
        for l in sample:
            if l.startswith("Heritability: "):
                h = float(l.replace("Heritability: ", ""))
                break
        for l in sample:
            if l.startswith("Table:"):
                expected_output_table = sample[sample.index(l) + 2 :]
                break

        # Compound the model with the read confifuration and generate the table
        m = pytoxo.model.Model(
            os.path.join(
                "models", f"additive_{test_order}.csv"
            )  # Unknown so unchecked, only use any one
        )
        pt = m.find_max_prevalence_table(mafs=mafs, h=h, check=False)
        pt_as_gametes = pt._compound_table_as_gametes().splitlines(keepends=True)

        # Discard headers to compare only the table
        for l in pt_as_gametes:
            if l.startswith("Table:"):
                output_table = pt_as_gametes[pt_as_gametes.index(l) + 2 :]
                break

        # Check only the disposition of the table members
        for expected_output_table_line, output_table_line in zip(
            expected_output_table, output_table
        ):
            if expected_output_table_line == "\n":
                self.assertEqual(expected_output_table_line, output_table_line)
            else:
                for ev, v in zip(
                    expected_output_table_line.split(","), output_table_line.split(",")
                ):
                    self.assertEqual(type(ev), type(v))

    def test_ptable_as_gametes_check_disposition_as_unknown_3(self):
        """Test composition of the `PTable` formatted as GAMETES format,
        comparing with a valid sample file to the same input. Only compares
        the table disposition, not the values due to the sample table is not
        generated with a known repository model file."""
        test_order = 3  # Determine the sources to use in this particular test

        sample_filename = os.path.join(
            "test", "unit", "gametes_output_samples", f"unknown_{test_order}.txt"
        )
        with open(sample_filename, "r") as sample_file:
            sample = sample_file.readlines()

        # Parse the file to compose the experiment
        for l in sample:
            if l.startswith("Minor allele frequencies:\t"):
                mafs = [
                    float(maf)
                    for maf in l.replace("Minor allele frequencies:\t", "").split("\t")
                ]
                break
        for l in sample:
            if l.startswith("Heritability: "):
                h = float(l.replace("Heritability: ", ""))
                break
        for l in sample:
            if l.startswith("Table:"):
                expected_output_table = sample[sample.index(l) + 2 :]
                break

        # Compound the model with the read confifuration and generate the table
        m = pytoxo.model.Model(
            os.path.join(
                "models", f"additive_{test_order}.csv"
            )  # Unknown so unchecked, only use any one
        )
        pt = m.find_max_prevalence_table(mafs=mafs, h=h, check=False)
        pt_as_gametes = pt._compound_table_as_gametes().splitlines(keepends=True)

        # Discard headers to compare only the table
        for l in pt_as_gametes:
            if l.startswith("Table:"):
                output_table = pt_as_gametes[pt_as_gametes.index(l) + 2 :]
                break

        # Check only the disposition of the table members
        for expected_output_table_line, output_table_line in zip(
            expected_output_table, output_table
        ):
            if expected_output_table_line == "\n":
                self.assertEqual(expected_output_table_line, output_table_line)
            else:
                for ev, v in zip(
                    expected_output_table_line.split(","), output_table_line.split(",")
                ):
                    self.assertEqual(type(ev), type(v))

    def test_ptable_as_gametes_check_disposition_as_unknown_4(self):
        """Test composition of the `PTable` formatted as GAMETES format,
        comparing with a valid sample file to the same input. Only compares
        the table disposition, not the values due to the sample table is not
        generated with a known repository model file."""
        test_order = 4  # Determine the sources to use in this particular test

        sample_filename = os.path.join(
            "test", "unit", "gametes_output_samples", f"unknown_{test_order}.txt"
        )
        with open(sample_filename, "r") as sample_file:
            sample = sample_file.readlines()

        # Parse the file to compose the experiment
        for l in sample:
            if l.startswith("Minor allele frequencies:\t"):
                mafs = [
                    float(maf)
                    for maf in l.replace("Minor allele frequencies:\t", "").split("\t")
                ]
                break
        for l in sample:
            if l.startswith("Heritability: "):
                h = float(l.replace("Heritability: ", ""))
                break
        for l in sample:
            if l.startswith("Table:"):
                expected_output_table = sample[sample.index(l) + 2 :]
                break

        # Compound the model with the read confifuration and generate the table
        m = pytoxo.model.Model(
            os.path.join(
                "models", f"additive_{test_order}.csv"
            )  # Unknown so unchecked, only use any one
        )
        pt = m.find_max_prevalence_table(mafs=mafs, h=h, check=False)
        pt_as_gametes = pt._compound_table_as_gametes().splitlines(keepends=True)

        # Discard headers to compare only the table
        for l in pt_as_gametes:
            if l.startswith("Table:"):
                output_table = pt_as_gametes[pt_as_gametes.index(l) + 2 :]
                break

        # Check only the disposition of the table members
        for expected_output_table_line, output_table_line in zip(
            expected_output_table, output_table
        ):
            if expected_output_table_line == "\n":
                self.assertEqual(expected_output_table_line, output_table_line)
            else:
                for ev, v in zip(
                    expected_output_table_line.split(","), output_table_line.split(",")
                ):
                    self.assertEqual(type(ev), type(v))
